generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int                @id @default(autoincrement())
    role             UserRole           @default(USER)
    verified         DateTime
    fullName         String
    email            String             @unique
    password         String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    cart             Cart?
    orders           Order[]
    verificationCode VerificationCode[]
    privider         String?
    providerId       String?
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    products Product[]
}

model Product {
    id               Int                @id @default(autoincrement())
    name             String
    imageUrl         String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    category         Category?          @relation(fields: [categoryId], references: [id])
    categoryId       Int?
    ingredient       Ingredient[]
    productVariation ProductVariation[]
}

// ProductVariation. is the same as ProductItem in finished project on github
model ProductVariation {
    id        Int        @id @default(autoincrement())
    price     Int
    size      Int?
    doughType String? // e.g., thin, thick  - тонкий, толстый тип теста
    product   Product    @relation(fields: [productId], references: [id])
    productId Int
    cartItem  CartItem[]
}

model Ingredient {
    id        Int        @id @default(autoincrement())
    name      String
    price     Int
    imageUrl  String
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    products  Product[]
    cartItem  CartItem[]
}

model Cart {
    id          Int        @id @default(autoincrement())
    user        User?      @relation(fields: [userId], references: [id])
    userId      Int?       @unique
    token       String?    @unique
    totalAmount Int        @default(0)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    cartItem    CartItem[]
}

model CartItem {
    id                 Int              @id @default(autoincrement())
    productVariation   ProductVariation @relation(fields: [productVariationId], references: [id])
    productVariationId Int
    cart               Cart             @relation(fields: [cartId], references: [id])
    cartId             Int
    ingredients        Ingredient[]
    quantity           Int
    createdAt          DateTime         @default(now())
    updatedAt          DateTime         @updatedAt
}

model Order {
    id          Int         @id @default(autoincrement())
    user        User?       @relation(fields: [userId], references: [id])
    userId      Int
    token       String      @unique
    totalAmount Int
    status      OrderStatus
    paymetId    String?
    items       Json
    fullName    String
    phone       String
    address     String
    email       String
    comment     String?
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model VerificationCode {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique
    code      String   @unique
    createdAt DateTime @default(now())

    @@unique([userId, code])
}

enum OrderStatus {
    PENDING
    COMPLETED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
    GUEST
}
